from flask import render_template, flash, url_for, redirect, Flask, jsonify
from datetime import datetime
from app import app
import config as cfg
import json
from web3 import Web3

from app.models.forms import VoteForm

@app.route("/", methods=["POST", "GET"])
@app.route("/index", methods=['GET', 'POST'])
def index():
    vf = VoteForm()
    
    #Conecta ao Ganache e ao SmartContract
    ganache_url = "http://localhost:7545"
    web3 = Web3(Web3.HTTPProvider(ganache_url)) 
    address = web3.toChecksumAddress("0x722E1Dd982Bb57ec31bB0d977Fe3633Ec64930e4") 
    
    #Seta o ABI e o ByteCode
    abi = json.loads('[{"constant":false,"inputs":[{"name":"_candidateId","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"candidatesCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"candidates","outputs":[{"name":"id","type":"uint256"},{"name":"name","type":"string"},{"name":"voteCount","type":"uint256"},{"name":"img","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"voters","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]')
    bytecode = "6060604052341561000f57600080fd5b6100e36040805190810160405280600781526020017f4c6173616e686100000000000000000000000000000000000000000000000000815250608060405190810160405280605f81526020017f687474703a2f2f7777772e72656365697461736e6573746c652e636f6d2e627281526020017f2f696d616765732f64656661756c742d736f757263652f726563697065732f6c81526020017f6173616e68615f615f626f6c6f6e686573615f7361626f726f73612e6a7067008152506101e264010000000002610345176401000000009004565b6101dd6040805190810160405280600981526020017f43687572726173636f000000000000000000000000000000000000000000000081525060a060405190810160405280608081526020017f68747470733a2f2f696d672e737470752e636f6d2e62722f3f696d673d68747481526020017f70733a2f2f73332e616d617a6f6e6177732e636f6d2f70752d6d67722f64656681526020017f61756c742f61305230663030303031306e334a574541592f356362646338393181526020017f653462303438343266636530343931312e6a706726773d37313026683d3436328152506101e264010000000002610345176401000000009004565b610328565b60026000815480929190600101919050555060806040519081016040528060025481526020018381526020016000815260200182815250600160006002548152602001908152602001600020600082015181600001556020820151816001019080519060200190610254929190610283565b5060408201518160020155606082015181600301908051906020019061027b929190610283565b509050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102c457805160ff19168380011785556102f2565b828001600101855582156102f2579182015b828111156102f15782518255916020019190600101906102d6565b5b5090506102ff9190610303565b5090565b61032591905b80821115610321576000816000905550600101610309565b5090565b90565b6104b7806103376000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630121b93f146100675780632d35a8a21461008a5780633477ee2e146100b3578063a3ec138d14610203575b600080fd5b341561007257600080fd5b6100886004808035906020019091905050610254565b005b341561009557600080fd5b61009d6102f1565b6040518082815260200191505060405180910390f35b34156100be57600080fd5b6100d460048080359060200190919050506102f7565b60405180858152602001806020018481526020018060200183810383528681815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561016d5780601f106101425761010080835404028352916020019161016d565b820191906000526020600020905b81548152906001019060200180831161015057829003601f168201915b50508381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156101f05780601f106101c5576101008083540402835291602001916101f0565b820191906000526020600020905b8154815290600101906020018083116101d357829003601f168201915b5050965050505050505060405180910390f35b341561020e57600080fd5b61023a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610325565b604051808215151515815260200191505060405180910390f35b60008111801561026657506002548111155b151561027157600080fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008281526020019081526020016000206002016000815480929190600101919050555050565b60025481565b6001602052806000526040600020600091509050806000015490806001019080600201549080600301905084565b60006020528060005260406000206000915054906101000a900460ff1681565b600260008154809291906001019190505550608060405190810160405280600254815260200183815260200160008152602001828152506001600060025481526020019081526020016000206000820151816000015560208201518160010190805190602001906103b79291906103e6565b506040820151816002015560608201518160030190805190602001906103de9291906103e6565b509050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061042757805160ff1916838001178555610455565b82800160010185558215610455579182015b82811115610454578251825591602001919060010190610439565b5b5090506104629190610466565b5090565b61048891905b8082111561048457600081600090555060010161046c565b5090565b905600a165627a7a723058206fec17c2e54f4c6ad624c751e8107eb1ca161d6cc64ae8df446222d26179a4a80029"
    
    #Instancia o contrato
    contract = web3.eth.contract(address = address, abi = abi, bytecode=bytecode)
    
    #Contas da transação
    web3.eth.defaultAccount = web3.eth.accounts[5]
    acc1 = web3.eth.accounts[0]
    acc2 = web3.eth.accounts[5]

    #Private Key da conta
    private_key = "cd3c2cbe8f5d75ee3ddb41b54b77426f1fe029186bd307c3d2787f75ed304123"
    
    #organiza os dados do SmartContract pra usar no frontend
    opc1 = []
    opc2 = []
    for i in range(4):
        opc1.append(contract.functions.candidates(1).call()[i])
    for j in range(4):
        opc2.append(contract.functions.candidates(2).call()[j])
    
    #Loop do formulário para votação
    if vf.validate_on_submit():
        if vf.vote.data == 1 or vf.vote.data == 2:

            #Efetua a transação de acordo com o formulário do front
            tx_hash = contract.functions.vote(vf.vote.data).transact()

            #Timeout para acontecer a transação
            web3.eth.waitForTransactionReceipt(tx_hash)
            #Recupera o nonce da transação de acordo com a conta
            nonce = web3.eth.getTransactionCount(acc2)

            #json para setar o "preço" do voto
            tx = {
                'nonce': nonce,
                'to': acc1,
                'value': web3.toWei(1, 'ether'),
                'gas': 2000000,
                'gasPrice': web3.toWei('50', 'gwei'),
            }

            #Assina a transação 
            signed_tx = web3.eth.account.signTransaction(tx, private_key)
            #Faz a transferência dos ETH
            web3.eth.sendRawTransaction(signed_tx.rawTransaction)
            flash("Voto contado com sucesso !")
        else:
            flash("ID inválido, digite um ID para uma opção válida !")

    return render_template('teste.html', vf = vf, opc1 = opc1, opc2 = opc2)
